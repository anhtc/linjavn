@using LinJas.Areas.AdminLinja.Models.AuthModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/AdminLinja/Views/Shared/_Layouts.cshtml";
}

<h2 class="text-title">Cập nhật Phân quyền</h2>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-9">
            <div id="clientsDb">
                @(Html.Kendo().Grid<AspController>()
          .Name("grdController")
          .Columns(columns =>
          {
              columns.Bound(c => c.Controller).Sortable(false).Title("Controller");
              columns.Bound(c => c.Action).Title("Action");
              columns.Bound(c => c.Area).Sortable(false).Title("Area");
              columns.Bound(c => c.Description).Sortable(false).Title("Mô tả");
              columns.Bound(c => c.TrangThai).Sortable(true).Title("Trạng thái");
              columns.Bound(c => c.Action).Sortable(false).Title("").ClientTemplate("<a onclick='showWindowEdit(\"#=Action#\")' ><span class='glyphicon glyphicon-pencil'></span></a>").HtmlAttributes(new { style = "text-align:center;width:30px;" });
              columns.Bound(c => c.Action).Sortable(false).Title("").ClientTemplate("<a onclick='removeItemGrid(\"#=Action#\")' ><span class='glyphicon glyphicon-trash'></span></a>").HtmlAttributes(new { style = "text-align:center;width:30px;" });
          })
          .ToolBar(toolbar =>
          {
              toolbar.Template(
                @<text>
                    <div class="toolbar">
                        <table style="width:100%">
                            <tr>
                                <td width="25%" align="left">
                                    <button type="button" id="btnPhanQuyen" class="k-button"><span class="k-icon k-i-plus"></span>Cập nhật phân quyền</button>
                                </td>
                            </tr>
                        </table>
                    </div>
                </text>);
          })
        .Pageable()
        .Sortable()
        .Selectable(select => select
        .Mode(GridSelectionMode.Single)
        .Type(GridSelectionType.Row))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Read(read => read.Action("LoadData", "Roles")))
                )
            </div>
        </div>
        <div class="col-md-3">
            @(Html.Kendo().Grid<AspNetRole>()
          .Name("grdRole")
          .Columns(columns =>
          {
              columns.Bound(c => c.Id).Sortable(false).Title("Mã");
              columns.Bound(c => c.RoleName).Title("Quyền");
              columns.Bound(c => c.Id).Sortable(false).Title("").ClientTemplate("<a onclick='updateItemGridRole(\"#=Id#\")' ><span class='glyphicon glyphicon-pencil'></span></a>").HtmlAttributes(new { style = "text-align:center;width:30px;" });
              columns.Bound(c => c.Id).Sortable(false).Title("").ClientTemplate("<a onclick='removeItemGrid(\"#=Id#\")' ><span class='glyphicon glyphicon-trash'></span></a>").HtmlAttributes(new { style = "text-align:center;width:30px;" });
          })
          .ToolBar(toolbar =>
          {
              toolbar.Template(
                @<text>
                    <div class="toolbar">
                        <table style="width:100%">
                            <tr>
                                <td>
                                    <button type="button" id="btnCreateRoleId" onclick="showAdd()" class="k-button"><span class="k-icon k-i-plus"></span>Tạo Quyền</button>
                                </td>
                            </tr>
                        </table>
                    </div>
                </text>);
          })
        .Pageable()
        .Sortable()
        .Selectable(select => select
        .Mode(GridSelectionMode.Single)
        .Type(GridSelectionType.Row))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Read(read => read.Action("GetAllRole", "Roles")))
            )
        </div>
    </div>
    <!--Người dùng-->
    <div class="row">
        <div class="col-md-12">
            <h2 class="text-title">Danh sách người dùng</h2>
            <div id="clientsDb">
                @(Html.Kendo().Grid<NguoiDungModel>()
          .Name("grdUser")
          .Columns(columns =>
          {
              columns.Bound(c => c.Id).Sortable(false).Title("Id");
              columns.Bound(c => c.Avatar).Title("Avatar");
              columns.Bound(c => c.Email).Sortable(false).Title("Email");
              columns.Bound(c => c.Phone).Sortable(false).Title("Phone");
              columns.Bound(c => c.UserName).Sortable(true).Title("Tên tài khoản");
              columns.Bound(c => c.PasswordHash).Sortable(false).Title("Mật khẩu");
              columns.Bound(c => c.RoleName).Sortable(false).Title("Quyền");
              columns.Bound(c => c.Id).Sortable(false).Title("").ClientTemplate("<a onclick='showWindowEdit(\"#=Id#\")' ><span class='glyphicon glyphicon-pencil'></span></a>").HtmlAttributes(new { style = "text-align:center;width:30px;" });
              columns.Bound(c => c.Id).Sortable(false).Title("").ClientTemplate("<a onclick='removeItemGrid(\"#=Id#\")' ><span class='glyphicon glyphicon-trash'></span></a>").HtmlAttributes(new { style = "text-align:center;width:30px;" });
          })
          .ToolBar(toolbar =>
          {
              toolbar.Template(
                @<text>
                    <div class="toolbar">
                        <table style="width:100%">
                            <tr>
                                <td width="25%" align="left">
                                    <button type="button" id="btnPhanQuyen" class="k-button"><span class="k-icon k-i-plus"></span>Thêm Người dùng</button>
                                </td>
                            </tr>
                        </table>
                    </div>
                </text>);
          })
        .Pageable()
        .Sortable()
        .Selectable(select => select
        .Mode(GridSelectionMode.Single)
        .Type(GridSelectionType.Row))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Read(read => read.Action("LoadDataNguoiDung", "Roles")))
                )
            </div>
        </div>
        <div class="col-md-6">
            <div id="clientsDb">
                @(Html.Kendo().Grid<BranchFilterModel>()
                  .Name("grid-filter")
          .Columns(columns =>
          {
              columns.Bound(c => c.Id).HeaderTemplate("<span class='k-link'><input id='mastercheckbox' name='all' type='checkbox'/></span>")
              .ClientTemplate("<input name='checkedRecords' type='checkbox' value='#=Id#' id='checkboxGroups_#=Id#' #=isBranchFormat# />")
              .Sortable(false).Width(70);
              columns.Bound(c => c.STT).Title("STT").Width(50);
              columns.Bound(c => c.NhomKhuyenMai).Title("Nhóm khuyến mại");
              columns.Bound(c => c.FilterCategoryName).Title("Bộ lọc");
              columns.Bound(c => c.NameVn).Title("Tên (tiếng việt)");
              columns.Bound(c => c.NameEn).Title("Tên (tiếng anh)");
              columns.Bound(c => c.IsSelectedFormat).Title("Chọn mặc định").ClientTemplate("#=IsSelectedFormat#");

              columns.Bound(c => c.Description).Title("Mô tả");

          })
           .ToolBar(toolbar =>
           {
           toolbar.Template(@<text>
                    <div class="toolbar">
                        <button type="button" id="BtnCreate" onclick="UpdateFilterBranch();" class="k-button"><span class="k-icon k-i-plus"></span>Cập Nhật</button>
                    </div>
        </text>);
           })
            .Pageable()
            .Selectable(select => select
            .Mode(GridSelectionMode.Single)
            .Type(GridSelectionType.Row))
            .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .Model(model =>
            {
            model.Id(p => p.Id);
            }
            )
            .Read(read => read.Action("LoadDataBranchFilter", "DoiTac").Data("filterParams"))
            .ServerOperation(true)
            ))
            </div>
        </div>
    </div>
</div>

@*Thêm mới Role*@
<div id="window-Add">
    @(Html.Kendo().Window().Name("WindowAddRoleId")
                .Title("Quản lý quyền")
                .Draggable()
                .Width(350)
                .Visible(false)
                .Modal(true)
                .Actions(actions => actions.Close())
                .Content(
    @<text>
        <div><span id="ErrorMessage"></span></div>
        <div>
            <table style="width: 100%;" border="0">
                <tr>
                    <td><label>Tên quyền</label></td>
                </tr>
                <tr>
                    <td>
                        <input type="text" id="txtRolesName" class='k-textbox' placeholder="Nhập tên quyền (user)..." />
                    </td>
                </tr>
                <tr>
                    <td>
                        <hr />
                        <button type="button" id="BtnAddNew" class="k-button" onclick="InsertRole()"><span class="k-icon k-edit"></span> Thêm mới</button>
                        <button type="button" id="BtnUpdate" class="k-button" onclick="UpdateRole()"><span class="k-icon k-edit"></span> Cập nhật</button>
                    </td>
                </tr>
            </table>
        </div>
    </text>
    )
    )
</div>
<script type="text/javascript">
    var idRole;
    $(document).ready(function () {
        $("#btnPhanQuyen").click(function () {
            getupdateroles();
        })
    })
    function getupdateroles() {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetController", "Roles")',
            dataType: 'json',
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.Num == 1) {
                    $("#grdController").data("kendoGrid").dataSource.read();
                    $("#grdController").data("kendoGrid").refresh();
                }
                showAlertView(data.Message, "Đồng ý");
            },
            error: function () {
                showAlertView("Lỗi không thể kết nối đến máy chủ.", "Đồng ý");
            }
        });
    }
    // thêm
    function showAdd() {
        $("#BtnAddNew").show();
        $("#BtnUpdate").hide();

        if (!$("#WindowAddRoleId").is(":visible")) {
            //resetAllField();
            $("#WindowAddRoleId").data("kendoWindow").center().open();
        }
    }
    //sửa
    function showUpdate() {
        $("#BtnAddNew").hide();
        $("#BtnUpdate").show();

        if (!$("#WindowAddRoleId").is(":visible")) {
            $("#WindowAddRoleId").data("kendoWindow").center().open();
        }
    }
    //lấy detail để sửa Role
    function updateItemGridRole(Id)
    {
        clearData();
        idRole = Id;
        $.get('@Url.Action("GetUpdateRole", "Roles")', { id: idRole })
            .done(function (data) {
                $("#txtRolesName").val(data.RoleName);
           showUpdate();
       });
    }
    //
    function validate() {
        var _roleName = $("#txtRolesName").val()

        if (_roleName == "") {
            $("#ErrorMessage").text("Quyền không được phép trống.");
            return false;
        }
    }
    //Thêm mới quyền
     function InsertRole() {
        var _rolesName = $("#txtRolesName").val();
        var formData = new FormData();
        formData.append("roleName", _rolesName);

        $.ajax({
            type: "POST",
            url: '@Url.Action("CreateNewRoleId", "Roles")',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.Num == 1) {
                    clearData();
                    $("#WindowAddRoleId").data("kendoWindow").center().close();
                    $("#grdRole").data("kendoGrid").dataSource.read();
                    $("#grdRole").data("kendoGrid").refresh();
                }
                showAlertView(data.Message, "Đồng ý");
            },
            error: function () {
                showAlertView("Lỗi không thể kết nối đến máy chủ.", "Đồng ý");
            }
        });

    }
    //sửa quyền
    function UpdateRole() {

        var _rolesName = $("#txtRolesName").val();
        var formData = new FormData();
        formData.append("roleName", _rolesName);
        formData.append("id", idRole);
        $.ajax({
            type: "POST",
            url: '@Url.Action("UpdateRole", "Roles")',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.Num == 1) {
                    clearData();
                    $("#WindowAddRoleId").data("kendoWindow").center().close();
                    $("#grdRole").data("kendoGrid").dataSource.read();
                    $("#grdRole").data("kendoGrid").refresh();
                }
                showAlertView(data.Message, "Đồng ý");
            },
            error: function () {
                showAlertView("Lỗi không thể kết nối đến máy chủ.", "Đồng ý");
            }
        });
     }
    //sửa quyền
    function DeleteRole(Id) { 
        idRole = Id;
        var formData = new FormData();        
        formData.append("id", idRole);
        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteRole", "Roles")',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.Num == 1) {                   
                    $("#WindowAddRoleId").data("kendoWindow").center().close();
                    $("#grdRole").data("kendoGrid").dataSource.read();
                    $("#grdRole").data("kendoGrid").refresh();
                }
                showAlertView(data.Message, "Đồng ý");
            },
            error: function () {
                showAlertView("Lỗi không thể kết nối đến máy chủ.", "Đồng ý");
            }
        });
    }
    // Xóa hết dữ liệu khi cập nhật thành công
    function clearData() {
        $('#txtRolesName').val('');
    }
    function removeItemGrid(id) {
        $("#windowConfirm").data("kendoWindow").center().open();
        $("#confirmYes").unbind();
        $('#confirmYes').click(function () {
            $("#windowConfirm").data("kendoWindow").close();
            DeleteRole(id);
        });

        $('#confirmNo').click(function () {
            $("#windowConfirm").data("kendoWindow").close();
        });
    }
</script>
@* Thông báo *@
@Html.Partial("_Arlert")